Item class
===
Represents items that may be picked up and used in the game. Required functionality:

* Drawing methods on ground, in inventory, and when equipped (where to put on player)
* An abstract in-game type (e.g., armor, heavy or light, container)
* Associated ability/use function, if it has one. This should implement commands, sometimes.
* Associated effects on the player, if it has one
* Monetary value?
* Equip and unequip functionality, if relevant

ItemLocation
===
Keeps track of an item's current location

* Possible locations: on actor, on the floor, in a chest, in a store
* Also if it's equipped or not
* Should output this information, as well as context (i.e. coordinates or where in the invetory)

### Parser

### Item bonuses
+ bonuses like 'dress like a wizard?'

### Potion / Enchant System
+ potions can do things like create flaming or poisoned etc
+ weapons can have sockets for gems
..* gems can have emergent properties like gem a + gem b grants lightening sword blah blah

### randomized magical perks
+ make a distribution of the number of perks 

Inventory
=== 
Stores and represents all items. Required functionality:

* Drawing method for stored items
* reference by InvetoryMenu
* Ability to drop, equip, unequip items
* Ability to bind commands to items in inventory

GameControls
===
Defines all key bindings for mouse, keyboard and controller. Required functionality:

* Store command bindings
* Set bindings within game, i.e. a menu.
* Save key bindings for later game runs.
* Needs to be able to represent all buttons in text form

Actor Graphics
===
Basic drawing for actors.

* Based on a spritesheet and actor's current status
* There should be some precoded way of loading sprites correctly
* Later: item drawing.

Menu
===

* Toggle functionality
* Take keyboard/mouse inputs to alter displayed selection
* graphics for displaying the menu, and showing what the selected item is
* Binds selected option to a command

MenuHandler

=== 
Handles toggling of menus

* Should have a keyboard listener, which then maps keystrokes to the given menu that is toggled
* Keeps track of the current menu loaded

InventoryMenu
===
Menu representing the inventory

* Graphical representation of items
* Sends commands to the inventory
* Submenu should give options to: inspect, identify, use, equip/unequip, drop


Other classes/features
===

* Items--> Drops/ inventory system
* Enemies -->
* - Bosses
* - Action Engine, 
* - Status --> Attributes, Effects
* - Input Listeners --> Commands
* Graphics -->
* - Loading from spritesheets, filenames set in data
* Level Generation -->
* - Layout, enemies, items, stores, terrain, doors, optional quests, secrets
* Player -->
* - Inventory, Money
* - Skills/abilities --> books, leveling system , perktree
* - races, advantages/disadvantages
* Load/save system (key bindings, level + player data)
* Game map --> Travel between poinnts
* Combat engine
* Lighting effects 




